# Starter pipeline


# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

variables:
  buildConfiguration: 'Release'
  solution: '**/*.sln'

stages:
- stage: provision
  jobs:
  - job: provision_storage
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: AzureCLI@2
      name: azurecli
      inputs:
        azureSubscription: 'az-service-connection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          rgName=$(rgName)
          suffix=$(suffix)
          storageAccountName=$(storageAccountName)
          containerName=$(containerName)
          azRegion=$(azRegion)
          
          rgExists=$(az group exists --name $rgName)
          accountExists=false && az storage account show --name $storageAccountName && accountExists=true
          containerExists=$accountExists
          
          if $accountExists; then
              containerExists=$(az storage container exists --account-name $storageAccountName --name $containerName | jq '.exists == true')
          fi
          
          echo $"rg exists: ${rgExists}"
          echo $"account exists: ${accountExists}"
          echo $"container exists: ${containerExists}"
          
          # Create resources that don't exist
          
          if ! $rgExists; then
              echo $"Creating resource group ${rgName} in region ${azRegion}"
              az group create --location $azRegion --name $rgName
          fi
          
          if ! $accountExists; then
              echo $"Creating storage account ${storageAccountName}"
              az storage account create --name $storageAccountName --resource-group $rgName --location $azRegion --sku Standard_LRS
          fi
          
          if ! $containerExists; then
              echo $"Creating storage container ${containerName} for storage account ${storageAccountName}"
              az storage container create --name $containerName --account-name $storageAccountName
          fi
          
          # Set storage account key as Pipeline variable.
          azStorageKey=$(az storage account keys list --account-name $storageAccountName | jq -r .[0].value)
          echo $"##vso[task.setvariable variable=storageKey;isOutput=true]${azStorageKey}"
  - job: terraform
    dependsOn: provision_storage
    variables:
        storageKey: $[ dependencies.provision_storage.outputs['azurecli.storageKey'] ]
    pool:
      vmImage: ubuntu-latest
    steps:
      - task: replacetokens@5
        inputs:
          targetFiles: '**/*.tf'
          encoding: 'auto'
          tokenPattern: 'rm'
          writeBOM: true
          actionOnMissing: 'fail'
          keepToken: false
          actionOnNoFiles: 'fail'
          enableTransforms: false
          enableRecursion: false
          useLegacyPattern: false
          enableTelemetry: true
      - task: replacetokens@5
        inputs:
          targetFiles: '**.*.tfvars'
          encoding: 'auto'
          tokenPattern: 'rm'
          writeBOM: true
          actionOnMissing: 'fail'
          keepToken: false
          actionOnNoFiles: 'fail'
          enableTransforms: false
          enableRecursion: false
          useLegacyPattern: false
          enableTelemetry: true
      - task: Bash@3
        displayName: 'Test variable'
        inputs:
          targetType: 'inline'
          script: 'echo $(storageKey)'
      - task: TerraformInstaller@1
        inputs:
          terraformVersion: 'latest'
      - task: TerraformTaskV4@4
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
          backendServiceArm: 'az-service-connection'
          backendAzureRmResourceGroupName: '$(rgName)'
          backendAzureRmStorageAccountName: '$(storageAccountName)'
          backendAzureRmContainerName: '$(containerName)'
          backendAzureRmKey: 'terraform.tfstate'
      - task: TerraformTaskV4@4
        inputs:
          provider: 'azurerm'
          command: 'plan'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
          commandOptions: '-target="module.infra"'
          environmentServiceNameAzureRM: 'az-service-connection'
      - task: TerraformTaskV4@4
        inputs:
          provider: 'azurerm'
          command: 'apply'
          commandOptions: '-target="module.infra" -auto-approve'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
          environmentServiceNameAzureRM: 'az-service-connection'
      - task: TerraformTaskV4@4
        inputs:
          provider: 'azurerm'
          command: 'plan'
          commandOptions: '-target="module.key-vault"'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
          environmentServiceNameAzureRM: 'az-service-connection'
      - task: TerraformTaskV4@4
        inputs:
          provider: 'azurerm'
          command: 'apply'
          commandOptions: '-target="module.key-vault" -auto-approve'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
          environmentServiceNameAzureRM: 'az-service-connection'
- stage: build_deploy
  jobs:
  - job: build_deploy
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: UseDotNet@2
      inputs:
        version: '7.x'
    - task: NuGetToolInstaller@1
    - task: NuGetCommand@2
      inputs:
        restoreSolution: '$(solution)'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'build'
        arguments: '--configuration $(buildConfiguration)'
      displayName: 'dotnet build $(buildConfiguration)'
    - task: DotNetCoreCLI@2
      inputs:
        command: publish
        publishWebProjects: True
        arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
        zipAfterPublish: True
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)' 
        artifactName: 'sampleApp'
        publishLocation: 'pipeline'
    - task: AzureWebApp@1
      inputs:
        azureSubscription: 'az-service-connection'
        appType: 'webApp'
        appName: $(appservicename)
        package: $(Build.ArtifactStagingDirectory)/**/azure-gitops-demo.zip
        deploymentMethod: 'auto'